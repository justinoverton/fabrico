{"version":3,"sources":["../modules/markov-chain-source.js"],"names":["drd","require","MarkovChainSource","list","chain","rng","construct_chain","markov_name","Defaults","defaultRng","AbstractSource","exports","Generator","prototype","markov","name_set","chain_cache","generate_name","type","markov_chain","i","length","names","split","incr_chain","j","name","c","substr","string","last_c","scale_chain","key","token","table_len","count","weighted","Math","floor","pow","parts","select_link","name_len","push","join","len","idx","getRandomInt","random","t"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAIA,MAAMC,QAAQ,wBAAR,CAAV;;IAEMC,iB;;;AACF,6BAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAEd,UAAKA,IAAL,GAAYA,IAAZ;AACA,UAAKC,KAAL,GAAa,IAAb;AAHc;AAIjB;;;;4BAEOC,G,EAAK;;AAET,UAAG,KAAKD,KAAL,KAAe,IAAlB,EAAwB;AACpB,aAAKA,KAAL,GAAaE,gBAAgB,KAAKH,IAArB,CAAb;AACH;;AAED,aAAOI,YAAY,KAAKH,KAAjB,EAAwBC,OAAOL,IAAIQ,QAAJ,CAAaC,UAA5C,CAAP;AACH;;;;EAd2BT,IAAIU,c;;AAkBpCC,QAAQT,iBAAR,GAA4BA,iBAA5B;;AAEA;;;AAGAF,IAAIY,SAAJ,CAAcC,SAAd,CAAwBC,MAAxB,GAAiC,UAASX,IAAT,EAAe;AAC5C,SAAO,IAAID,iBAAJ,CAAsBC,IAAtB,CAAP;AACH,CAFD;;AAKA;AACA;AACA;AACA;AACA;;AAEE,IAAIY,WAAW,EAAf;AACA,IAAIC,cAAc,EAAlB;;AAEF;AACA;;AAEE,SAASC,aAAT,CAAwBC,IAAxB,EAA8B;AAC5B,MAAId,KAAJ,CAAW,IAAIA,QAAQe,aAAaD,IAAb,CAAZ,EAAgC;AACzC,WAAOX,YAAYH,KAAZ,CAAP;AACD;AACD,SAAO,EAAP;AACD;;AAEH;AACA;;AAEE,SAASe,YAAT,CAAuBD,IAAvB,EAA6B;AAC3B,MAAId,KAAJ,CAAW,IAAIA,QAAQY,YAAYE,IAAZ,CAAZ,EAA+B;AACxC,WAAOd,KAAP;AACD,GAFU,MAEJ;AACL,QAAID,IAAJ,CAAU,IAAIA,OAAOY,SAASG,IAAT,CAAX,EAA2B;AACnC,UAAId,KAAJ,CAAW,IAAIA,QAAQE,gBAAgBH,IAAhB,CAAZ,EAAmC;AAC5Ca,oBAAYE,IAAZ,IAAoBd,KAApB;AACA,eAAOA,KAAP;AACD;AACF;AACF;AACD,SAAO,KAAP;AACD;;AAEH;AACA;;AAEE,SAASE,eAAT,CAA0BH,IAA1B,EAAgC;AAC9B,MAAIC,QAAQ,EAAZ;;AAEA,MAAIgB,CAAJ,CAAO,KAAKA,IAAI,CAAT,EAAYA,IAAIjB,KAAKkB,MAArB,EAA6BD,GAA7B,EAAkC;AACvC,QAAIE,QAAQnB,KAAKiB,CAAL,EAAQG,KAAR,CAAc,KAAd,CAAZ;AACAnB,YAAQoB,WAAWpB,KAAX,EAAiB,OAAjB,EAAyBkB,MAAMD,MAA/B,CAAR;;AAEA,QAAII,CAAJ,CAAO,KAAKA,IAAI,CAAT,EAAYA,IAAIH,MAAMD,MAAtB,EAA8BI,GAA9B,EAAmC;AACxC,UAAIC,OAAOJ,MAAMG,CAAN,CAAX;AACArB,cAAQoB,WAAWpB,KAAX,EAAiB,UAAjB,EAA4BsB,KAAKL,MAAjC,CAAR;;AAEA,UAAIM,IAAID,KAAKE,MAAL,CAAY,CAAZ,EAAc,CAAd,CAAR;AACAxB,cAAQoB,WAAWpB,KAAX,EAAiB,SAAjB,EAA2BuB,CAA3B,CAAR;;AAEA,UAAIE,SAASH,KAAKE,MAAL,CAAY,CAAZ,CAAb;AACA,UAAIE,SAASH,CAAb;;AAEA,aAAOE,OAAOR,MAAP,GAAgB,CAAvB,EAA0B;AACxB,YAAIM,IAAIE,OAAOD,MAAP,CAAc,CAAd,EAAgB,CAAhB,CAAR;AACAxB,gBAAQoB,WAAWpB,KAAX,EAAiB0B,MAAjB,EAAwBH,CAAxB,CAAR;;AAEAE,iBAASA,OAAOD,MAAP,CAAc,CAAd,CAAT;AACAE,iBAASH,CAAT;AACD;AACF;AACF;AACD,SAAOI,YAAY3B,KAAZ,CAAP;AACD;AACD,SAASoB,UAAT,CAAqBpB,KAArB,EAA4B4B,GAA5B,EAAiCC,KAAjC,EAAwC;AACtC,MAAI7B,MAAM4B,GAAN,CAAJ,EAAgB;AACd,QAAI5B,MAAM4B,GAAN,EAAWC,KAAX,CAAJ,EAAuB;AACrB7B,YAAM4B,GAAN,EAAWC,KAAX;AACD,KAFD,MAEO;AACL7B,YAAM4B,GAAN,EAAWC,KAAX,IAAoB,CAApB;AACD;AACF,GAND,MAMO;AACL7B,UAAM4B,GAAN,IAAa,EAAb;AACA5B,UAAM4B,GAAN,EAAWC,KAAX,IAAoB,CAApB;AACD;AACD,SAAO7B,KAAP;AACD;AACD,SAAS2B,WAAT,CAAsB3B,KAAtB,EAA6B;AAC3B,MAAI8B,YAAY,EAAhB;;AAEA,MAAIF,GAAJ,CAAS,KAAKA,GAAL,IAAY5B,KAAZ,EAAmB;AAC1B8B,cAAUF,GAAV,IAAiB,CAAjB;;AAEA,QAAIC,KAAJ,CAAW,KAAKA,KAAL,IAAc7B,MAAM4B,GAAN,CAAd,EAA0B;AACnC,UAAIG,QAAQ/B,MAAM4B,GAAN,EAAWC,KAAX,CAAZ;AACA,UAAIG,WAAWC,KAAKC,KAAL,CAAWD,KAAKE,GAAL,CAASJ,KAAT,EAAe,GAAf,CAAX,CAAf;;AAEA/B,YAAM4B,GAAN,EAAWC,KAAX,IAAoBG,QAApB;AACAF,gBAAUF,GAAV,KAAkBI,QAAlB;AACD;AACF;AACDhC,QAAM,WAAN,IAAqB8B,SAArB;AACA,SAAO9B,KAAP;AACD;;AAEH;AACA;;AAEE,SAASG,WAAT,CAAsBH,KAAtB,EAA6BC,GAA7B,EAAkC;AAChC,MAAImC,QAAQC,YAAYrC,KAAZ,EAAkB,OAAlB,EAA2BC,GAA3B,CAAZ;AACA,MAAIiB,QAAQ,EAAZ;;AAEA,MAAIF,CAAJ,CAAO,KAAKA,IAAI,CAAT,EAAYA,IAAIoB,KAAhB,EAAuBpB,GAAvB,EAA4B;AACjC,QAAIsB,WAAWD,YAAYrC,KAAZ,EAAkB,UAAlB,EAA8BC,GAA9B,CAAf;AACA,QAAIsB,IAAIc,YAAYrC,KAAZ,EAAkB,SAAlB,EAA6BC,GAA7B,CAAR;AACA,QAAIqB,OAAOC,CAAX;AACA,QAAIG,SAASH,CAAb;;AAEA,WAAOD,KAAKL,MAAL,GAAcqB,QAArB,EAA+B;AAC7Bf,UAAIc,YAAYrC,KAAZ,EAAkB0B,MAAlB,EAA0BzB,GAA1B,CAAJ;AACAqB,cAAQC,CAAR;AACAG,eAASH,CAAT;AACD;AACDL,UAAMqB,IAAN,CAAWjB,IAAX;AACD;AACD,SAAOJ,MAAMsB,IAAN,CAAW,GAAX,CAAP;AACD;AACD,SAASH,WAAT,CAAsBrC,KAAtB,EAA6B4B,GAA7B,EAAkC3B,GAAlC,EAAuC;AACrC,MAAIwC,MAAMzC,MAAM,WAAN,EAAmB4B,GAAnB,CAAV;AACA,MAAIc,MAAOzC,GAAD,GAAQA,IAAI0C,YAAJ,CAAiB,CAAjB,EAAoBF,GAApB,CAAR,GAAmCR,KAAKC,KAAL,CAAWD,KAAKW,MAAL,KAAgBH,GAA3B,CAA7C;;AAEA,MAAII,IAAI,CAAR,CAAW,KAAK,IAAIhB,KAAT,IAAkB7B,MAAM4B,GAAN,CAAlB,EAA8B;AACvCiB,SAAK7C,MAAM4B,GAAN,EAAWC,KAAX,CAAL;AACA,QAAIa,MAAMG,CAAV,EAAa;AAAE,aAAOhB,KAAP;AAAe;AAC/B;AACD,SAAO,GAAP;AACD","file":"markov-chain-source.js","sourcesContent":["'use strict'\n\nlet drd = require('definitely-random-data');\n\nclass MarkovChainSource extends drd.AbstractSource {\n    constructor(list) {\n        super();\n        this.list = list;\n        this.chain = null;\n    }\n    \n    getItem(rng) {\n        \n        if(this.chain === null) {\n            this.chain = construct_chain(this.list);\n        }\n        \n        return markov_name(this.chain, rng || drd.Defaults.defaultRng);\n    }\n    \n}\n\nexports.MarkovChainSource = MarkovChainSource;\n\n/*\nExtend DRD to have a markov source\n*/\ndrd.Generator.prototype.markov = function(list) {\n    return new MarkovChainSource(list);\n};\n\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// name_generator.js\n// written and released to the public domain by drow <drow@bin.sh>\n// http://creativecommons.org/publicdomain/zero/1.0/\n// https://donjon.bin.sh/code/name/name_generator.js\n\n  var name_set = {};\n  var chain_cache = {};\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// generator function\n\n  function generate_name (type) {\n    var chain; if (chain = markov_chain(type)) {\n      return markov_name(chain);\n    }\n    return '';\n  }\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// get markov chain by type\n\n  function markov_chain (type) {\n    var chain; if (chain = chain_cache[type]) {\n      return chain;\n    } else {\n      var list; if (list = name_set[type]) {\n        var chain; if (chain = construct_chain(list)) {\n          chain_cache[type] = chain;\n          return chain;\n        }\n      }\n    }\n    return false;\n  }\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// construct markov chain from list of names\n\n  function construct_chain (list) {\n    var chain = {};\n\n    var i; for (i = 0; i < list.length; i++) {\n      var names = list[i].split(/\\s+/);\n      chain = incr_chain(chain,'parts',names.length);\n\n      var j; for (j = 0; j < names.length; j++) {\n        var name = names[j];\n        chain = incr_chain(chain,'name_len',name.length);\n\n        var c = name.substr(0,1);\n        chain = incr_chain(chain,'initial',c);\n\n        var string = name.substr(1);\n        var last_c = c;\n\n        while (string.length > 0) {\n          var c = string.substr(0,1);\n          chain = incr_chain(chain,last_c,c);\n\n          string = string.substr(1);\n          last_c = c;\n        }\n      }\n    }\n    return scale_chain(chain);\n  }\n  function incr_chain (chain, key, token) {\n    if (chain[key]) {\n      if (chain[key][token]) {\n        chain[key][token]++;\n      } else {\n        chain[key][token] = 1;\n      }\n    } else {\n      chain[key] = {};\n      chain[key][token] = 1;\n    }\n    return chain;\n  }\n  function scale_chain (chain) {\n    var table_len = {};\n\n    var key; for (key in chain) {\n      table_len[key] = 0;\n\n      var token; for (token in chain[key]) {\n        var count = chain[key][token];\n        var weighted = Math.floor(Math.pow(count,1.3));\n\n        chain[key][token] = weighted;\n        table_len[key] += weighted;\n      }\n    }\n    chain['table_len'] = table_len;\n    return chain;\n  }\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// construct name from markov chain\n\n  function markov_name (chain, rng) {\n    var parts = select_link(chain,'parts', rng);\n    var names = [];\n\n    var i; for (i = 0; i < parts; i++) {\n      var name_len = select_link(chain,'name_len', rng);\n      var c = select_link(chain,'initial', rng);\n      var name = c;\n      var last_c = c;\n\n      while (name.length < name_len) {\n        c = select_link(chain,last_c, rng);\n        name += c;\n        last_c = c;\n      }\n      names.push(name);\n    }\n    return names.join(' ');\n  }\n  function select_link (chain, key, rng) {\n    var len = chain['table_len'][key];\n    var idx = (rng) ? rng.getRandomInt(0, len) : Math.floor(Math.random() * len);\n\n    var t = 0; for (let token in chain[key]) {\n      t += chain[key][token];\n      if (idx < t) { return token; }\n    }\n    return '-';\n  }\n"]}